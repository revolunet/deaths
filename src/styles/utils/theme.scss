@use "sass:color";

$scheme: (
  "primary": (
    "light": #1976d2,
    "dark": #8a85ff,
  ),
  "secondary": (
    "light": #229a16,
    "dark": #03dac6,
  ),
  "color": (
    "dark": #adb0bb,
    "light": #484a51,
  ),
  "muted": (
    "light": #adb0bb,
    "dark": #484a51,
  ),
  "on-primary": (
    "dark": white,
    "light": white,
  ),
  "background": (
    "light": #fafafa,
    "dark": #1a2038,
  ),
  "surface": (
    "light": white,
    "dark": #222a45,
  ),
);

$shadows: (
  "dark": (
    0px 3px 3px -2px rgba(0, 0, 0, 0.06),
    0px 3px 4px 0px rgba(0, 0, 0, 0.042),
    0px 1px 8px 0px rgba(0, 0, 0, 0.036),
  ),
  "light": (
    0px 3px 3px -2px rgba(0, 0, 0, 0.06),
    0px 3px 4px 0px rgba(0, 0, 0, 0.042),
    0px 1px 8px 0px rgba(0, 0, 0, 0.036),
  ),
);

@function color($key: "primary", $variant: "light") {
  $map: map-get($scheme, $key);
  @return map-get($map, $variant);
}

@mixin colors($mode) {
  @each $key, $item in $scheme {
    #{$key}: map-get($item, $mode);
  }
}

@mixin apply($selector) {
  $modes: dark, light;
  @each $mode in $modes {
    [data-theme="#{$mode}"] {
      #{$selector} {
        @content ($mode);
      }
    }
  }
}

@function shadow($mode: "light") {
  @return map-get($shadows, $mode);
}
