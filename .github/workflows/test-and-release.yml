name: Tests & Release

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

#

jobs:
  #

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Get yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn --frozen-lockfile --perfer-offline

      - name: Lint
        run: yarn lint

      - name: Test
        run: yarn test:ci -u

      - name: Code coverage
        uses: codecov/codecov-action@v1
        with:
          directory: coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  #
  lighthouse:
    name: Lighthouse
    needs: test
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v2

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Node.js 10.x
        uses: actions/setup-node@v1
        with:
          node-version: 10.x

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Get yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn --frozen-lockfile --perfer-offline

      - name: Build
        run: yarn build

      # - name: npm install, build
      #   run: |
      #     npm install
      #     npm run build
      - name: run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.5.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  #

  release:
    needs: lighthouse
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}

      - name: Take screenshot
        id: screenshot
        uses: swinton/screenshot-website@v1.x
        with:
          delay: 5
          width: 900
          height: 472
          overwrite: true
          source: https://deaths.now.sh
          disable-animations: true

      - name: Copy screenshot
        run: |
          echo ${{ steps.screenshot.outputs.path }}
          cp ${{ steps.screenshot.outputs.path }} ./public/
          ls -la ./public/

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 16
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Release sum up
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
